from django.shortcuts import render
import pandas as pd
import numpy as np
# Create your views here.
def main_page(request):
    return render(request,'manse/main_page.html')
def result(request):
    print(request.POST)
    ptype=0
    name=request.POST['name']
    inpo = request.POST['date']  ## 사용자의 생년월일 입력
    inpo=inpo.replace('-','')
    manseDB = pd.read_csv('manseDB.csv')  ## 엑셀 데이터
    patientDB = pd.read_csv('patientDB.csv')  ## 환자 정보 엑셀 읽기
    yearinfo = patientDB['생년월일']  # 환자 생년월일
    IDinfo = patientDB['ID']  # 환자 아이디 정보
    ocsDWVDIS = pd.read_csv('ocsDWVDIS.csv')  ## 질병 정보 엑셀 데이터
    discode2 = ocsDWVDIS['Mcd']  ## 질병의 코드 discode1와 같은 것
    disname = ocsDWVDIS['KorName']  ## 질병의 한글 표시
    ocsDWWDATA = pd.read_csv('ocsDWWDATA.csv')  ## 환자ID & 질병 코드 엑셀 데이터
    disID = ocsDWWDATA['ID']  ## 질병을 가진 환자의 ID
    discode1 = ocsDWWDATA['MCD']  # 질병의 코드
    year = manseDB['생년월일']  # 만세력 생년월일
    hua = manseDB['화']
    su = manseDB['수']
    mok = manseDB['목']
    kim = manseDB['금']
    to = manseDB['토']
    thwkd = [1.0, 0.3333333333333333, 1.0, 1.6666666666666667, 2.0]
    tlswkd = [0.5, 0.5, 1.0, 1.0, 3.0]
    rks = [0.9354838709677419, 1.096774193548387, 1.6129032258064515, 1.096774193548387, 1.2580645161290323]
    dnlwkd = [1.0, 0.5, 2.0, 1.0, 1.5]
    eowkd = [1.2, 0.6, 1.4, 2.0, 0.8]
    t = manseDB.loc[manseDB['생년월일'] == int(inpo)]
    hua1 = int(t['화'].iloc[0])
    su1 = int(t['수'].iloc[0])
    mok1 = int(t['목'].iloc[0])
    kim1 = int(t['금'].iloc[0])
    to1 = int(t['토'].iloc[0])
    IDinfo1 = [24732546048, 24018748992, 24016605984, 20988416736, 24601245984, 24901325568, 24901327584, 25263485856,
               40315998240, 21042370944, 22933391040, 22814287776, 21637371168, 23627227680, 23730398496, 21378809088,
               21853012608, 24403536864, 24619906080, 24845143680, 24335303328, 24232231296, 24522253056, 24838045344,
               22164978528, 23544771264, 24156758304, 24227491680, 23793182784, 23596175232, 20869170336, 24375500352,
               22425844896, 23675101632, 24867033408, 24601572576, 24441312672, 21855066912, 25036024608, 23061227616,
               20938284864, 23934857184, 24660155520, 22333570560, 21666157632, 22873779936, 23155586496, 24132005856,
               24277024800, 23406586560, 20791929312, 24628679712, 24014860128, 23945598432, 23307584832, 22549266432,
               22600428480, 21317677920, 23740688160, 24802837920, 24903752832, 25251510816, 24534566784, 22747108608,
               24676845984, 23433363072, 24387523776, 21837076128, 22415089536, 25106423328, 22276531872, 25144757568,
               22005881856, 24755988096, 23669118144, 21407980608, 22750854336, 21241858176, 22318904160, 22910829984,
               23388061536, 21397324032, 22084767936, 22945368096, 24320878848, 25028674272, 23218072416, 21584243520,
               24563766528, 21713255424, 24732687168, 21451844736, 23672113920, 24477322464, 24636856608, 24936355584,
               23891037408, 24527274912, 20671699104, 24584023296, 24564544704, 22793349600, 24973510464, 23938792416,
               23805065088, 24201249408, 22168302912, 23077250784, 23416848000, 23495645376, 24922894752, 24417036000,
               24652170144, 20673920736, 21078146880, 23899982400, 24888886848, 21149464896, 24916893120, 23725521792,
               21425118624, 23415753312, 24529042944, 22947753024, 22728678336, 21365670816, 21675376800, 22303562400,
               22312422720, 22852049472, 22150457280, 23298143904, 22453893504, 24624254592, 23397375456, 23349753504,
               23675101632, 20228931072, 24697842624, 24573513888, 22583802528, 23441598432, 21837076128, 24221336832,
               23101958880, 25246857888, 23292438624, 24355370592, 22291831296, 23836811040, 23026183488, 21469637952,
               25106679360, 24610235328, 23048970336, 23014049184, 20748061152, 25267540032, 24311651616, 24277280832,
               21448984032, 23406005952, 25093799136, 22141600992, 24734576160, 23333883552, 23459597280, 23710387680,
               23143776768, 24283296576, 24904274976, 24698697408, 22313993184, 24454948896, 25098260544, 24741880128,
               23386156416, 24759893088, 25036665696, 23303149632, 24351578496, 22213293984, 23595699456, 21715894368,
               20333732832, 22384383840, 22577002560, 22592848320, 22854103776, 23375348640, 22660983072, 22670661888,
               24784800768, 24984163008, 24934512960, 24168840192, 23738468544, 22728678336, 24652903968, 24835025376]
    discode33 = ['C240000', float('NaN'), 'D131000', 'K297000', float('NaN'), 'T189001', float('NaN'), float('NaN'),
                 'K760001', float('NaN'), 'D126000', 'D126000', 'B182000', 'B182000', 'K253000', 'D131000', 'D131000',
                 'C20200', 'C20200', 'C20200', float('NaN'), 'D126004', 'K293000', 'K293000', 'K746001', 'K746001',
                 'K219000', 'D131000', 'I110000', float('NaN'), 'K277000', 'D126000', 'K293000', 'K219000', 'K599000',
                 'K219000', 'K746001', 'K746001', 'K746001', 'K269000', float('NaN'), 'K293000', 'D126000', 'D126000',
                 'C1620200', 'K257000', float('NaN'), 'K269000', 'K219000', 'B181001', float('NaN'), float('NaN'),
                 'K7031000', 'K210000', 'K754000', float('NaN'), 'K590000', 'D126004', 'D126004', 'D126004', 'K754000',
                 'D126000', 'K293000', 'K210000', 'K829000', 'K257000', 'K257000', float('NaN'), 'K219000', 'K267000',
                 float('NaN'), 'K559001', 'K219001', 'K219001', 'C1690200', 'K219000', 'K219000', 'K319000', 'B181001',
                 'B181001', 'K760001', 'N400000', 'K219000', 'K746001', float('NaN'), 'K293000', float('NaN'),
                 float('NaN'), 'C1690001', 'A1500000', 'K293000', float('NaN'), 'K210000', float('NaN'), 'D131000',
                 'D126000', float('NaN'), float('NaN'), 'K589000', 'D131000', 'K219000', 'K746001', 'K7031001',
                 'D134000', 'D131000', 'K859000', 'J00000', 'K293000', 'K293000', 'D126000', 'K219000', 'C187200',
                 'K257000', 'K293000', 'K219000', 'D130000', 'D131000', 'D131000', 'C1690000', 'K7031000', 'K219000',
                 'A090000', 'C189000', 'Z940000', 'Z940000', 'K293000', float('NaN'), float('NaN'), float('NaN'),
                 'K219000', float('NaN'), float('NaN'), 'K746001', 'K8030000', 'I100000', 'C1620000', 'K219000',
                 'K580000', 'K293000', 'K760001', float('NaN'), 'C1691001', float('NaN'), 'K219000', 'K760001',
                 'K8010000', 'K8010000', 'K8010000', 'K257000', float('NaN'), 'A090000', 'I109002', 'D126002',
                 'C220501', 'C1690000', 'D126004', 'K219000', float('NaN'), float('NaN'), 'K219000', 'K210000',
                 float('NaN'), 'K257000', float('NaN'), float('NaN'), 'I100000', 'K219000', 'D126004', 'K219000',
                 float('NaN'), 'K760001', 'K219000', 'K219000', 'K508001', 'K293000', 'D131000', 'K219000', 'K760001',
                 'K293000', 'K219000', float('NaN'), 'K210000', 'C1620000', 'K590000', 'K210000', 'K508001', 'K7030000',
                 'K293000', float('NaN'), 'B181001', 'K508001', float('NaN'), 'K293000', 'K267000', 'B181001',
                 'D126004', 'K293000', 'K293000', 'K267000', 'K754000']
    newdisname33 = ['간외담관의 악성 신생물', '위의 양성 신생물', '상세불명의 위염', '소화관의 상세불명 부분의 이물', '달리 분류되지 않은 지방(변화성)간',
                    '상세불명의 결장의 양성 신생물', '상세불명의 결장의 양성 신생물', '만성 C형바이러스간염', '만성 C형바이러스간염', '출혈 또는 천공이 없는 급성 위미란',
                    '위의 양성 신생물', '위의 양성 신생물', '직장팽대부의 악성 신생물', '직장팽대부의 악성 신생물', '직장팽대부의 악성 신생물', '결장의 폴립증(유전성)의 양성 신생물',
                    '만성 표재성 위염', '만성 표재성 위염', '괴사후성 (간) 경변증, 차일드-퍼 A', '괴사후성 (간) 경변증, 차일드-퍼 A', '식도염을 동반하지 않은 위-식도역류병',
                    '위의 양성 신생물', '(울혈성) 심부전을 동반한 고혈압성 심장병', '출혈 또는 천공이 없는 만성 상세불명 부위의 소화성 궤양', '상세불명의 결장의 양성 신생물',
                    '만성 표재성 위염', '식도염을 동반하지 않은 위-식도역류병', '상세불명의 기능성 장장애', '식도염을 동반하지 않은 위-식도역류병',
                    '괴사후성 (간) 경변증, 차일드-퍼 A', '괴사후성 (간) 경변증, 차일드-퍼 A', '괴사후성 (간) 경변증, 차일드-퍼 A',
                    '출혈 또는 천공이 없는 급성인지 만성인지 상세불명인 십이지장궤양', '만성 표재성 위염', '상세불명의 결장의 양성 신생물', '상세불명의 결장의 양성 신생물',
                    '위의 체부의 악성 신생물, 조기', '출혈 또는 천공이 없는 만성 위미란', '출혈 또는 천공이 없는 급성인지 만성인지 상세불명인 십이지장궤양',
                    '식도염을 동반하지 않은 위-식도역류병', 'B형 간염(바이러스성) NOS', '복수를 동반한  알콜성 간경변증', '식도염을 동반한 위-식도역류병', '자가면역성 간염',
                    '서행성 변비', '결장의 폴립증(유전성)의 양성 신생물', '결장의 폴립증(유전성)의 양성 신생물', '결장의 폴립증(유전성)의 양성 신생물', '자가면역성 간염',
                    '상세불명의 결장의 양성 신생물', '만성 표재성 위염', '식도염을 동반한 위-식도역류병', '담낭의 상세불명 질환', '출혈 또는 천공이 없는 만성 위미란',
                    '출혈 또는 천공이 없는 만성 위미란', '식도염을 동반하지 않은 위-식도역류병', '출혈 또는 천공이 없는 만성 십이지장궤양', '상세불명의 크론병, 상세불명',
                    '식도염을 동반하지 않은 위-식도역류병', '식도염을 동반하지 않은 위-식도역류병', '위암 NOS, 조기', '식도염을 동반하지 않은 위-식도역류병',
                    '식도염을 동반하지 않은 위-식도역류병', '위 및 십이지장의 상세불명 질환', 'B형 간염(바이러스성) NOS', 'B형 간염(바이러스성) NOS',
                    '달리 분류되지 않은 지방(변화성)간', '합병증을 동반하지 않은 전립선증식증', '식도염을 동반하지 않은 위-식도역류병', '괴사후성 (간) 경변증, 차일드-퍼 A',
                    '만성 표재성 위염', '상세불명의 위의 악성 신생물, 조기', '배양 유무에 관계없이 가래 현미경 검사로 확인된 공동이 있는 폐결핵', '만성 표재성 위염',
                    '식도염을 동반한 위-식도역류병', '위의 양성 신생물', '상세불명의 결장의 양성 신생물', '설사를 동반하지 않은 과민대장장증후군', '위의 양성 신생물',
                    '식도염을 동반하지 않은 위-식도역류병', '괴사후성 (간) 경변증, 차일드-퍼 A', '복수를 동반한  알콜성 간경변증', '간의 양성 신생물', '위의 양성 신생물',
                    '상세불명의 급성 췌장염', '급성 비인두염 [감기]', '만성 표재성 위염', '만성 표재성 위염', '상세불명의 결장의 양성 신생물',
                    '식도염을 동반하지 않은 위-식도역류병', '구불(굴곡부)의 악성 신생물', '출혈 또는 천공이 없는 만성 위미란', '만성 표재성 위염',
                    '식도염을 동반하지 않은 위-식도역류병', '식도의 양성 신생물', '위의 양성 신생물', '위의 양성 신생물', '상세불명의 위의 악성 신생물, 조기',
                    '복수를 동반한  알콜성 간경변증', '식도염을 동반하지 않은 위-식도역류병', '감염성 기원의 기타 및 상세불명의 위장염 및 결장염', '상세불명의 결장의 악성 신생물',
                    '신장이식 상태', '신장이식 상태', '만성 표재성 위염', '식도염을 동반하지 않은 위-식도역류병', '괴사후성 (간) 경변증, 차일드-퍼 A',
                    '담관염을 동반한 담관 결석, 폐색의 언급이 없는', '양성 고혈압', '위의 체부의 악성 신생물, 조기', '식도염을 동반하지 않은 위-식도역류병',
                    '설사를 동반한 과민대장장증후군', '만성 표재성 위염', '달리 분류되지 않은 지방(변화성)간', '식도의 하부 3분의1의 악성 신생물',
                    '식도염을 동반하지 않은 위-식도역류병', '달리 분류되지 않은 지방(변화성)간', '기타 담낭염을 동반한 담낭의 결석, 폐색의 언급이 없는',
                    '기타 담낭염을 동반한 담낭의 결석, 폐색의 언급이 없는', '기타 담낭염을 동반한 담낭의 결석, 폐색의 언급이 없는', '출혈 또는 천공이 없는 만성 위미란',
                    '감염성 기원의 기타 및 상세불명의 위장염 및 결장염', '동맥성 고혈압', '결장의 선종증', '간암, 바이러스 C', '상세불명의 위의 악성 신생물, 조기',
                    '결장의 폴립증(유전성)의 양성 신생물', '식도염을 동반하지 않은 위-식도역류병', '식도염을 동반하지 않은 위-식도역류병', '식도염을 동반한 위-식도역류병',
                    '출혈 또는 천공이 없는 만성 위미란', '양성 고혈압', '식도염을 동반하지 않은 위-식도역류병', '결장의 폴립증(유전성)의 양성 신생물',
                    '식도염을 동반하지 않은 위-식도역류병', '달리 분류되지 않은 지방(변화성)간', '식도염을 동반하지 않은 위-식도역류병', '식도염을 동반하지 않은 위-식도역류병',
                    '소장 및 대장 모두의 크론병, 경도', '만성 표재성 위염', '위의 양성 신생물', '식도염을 동반하지 않은 위-식도역류병', '달리 분류되지 않은 지방(변화성)간',
                    '만성 표재성 위염', '식도염을 동반하지 않은 위-식도역류병', '식도염을 동반한 위-식도역류병', '위의 체부의 악성 신생물, 조기', '서행성 변비',
                    '식도염을 동반한 위-식도역류병', '소장 및 대장 모두의 크론병, 경도', '복수를 동반하지 않은 알콜성 간경변증', '만성 표재성 위염', 'B형 간염(바이러스성) NOS',
                    '소장 및 대장 모두의 크론병, 경도', '만성 표재성 위염', '출혈 또는 천공이 없는 만성 십이지장궤양', 'B형 간염(바이러스성) NOS',
                    '결장의 폴립증(유전성)의 양성 신생물', '만성 표재성 위염', '만성 표재성 위염', '출혈 또는 천공이 없는 만성 십이지장궤양', '자가면역성 간염']
    num1 = 200
    discode3 = 'K754000'

    num = 0
    res = ''
    newdisname1 = []
    res_type = ''
    res2 = []
    for i in year:  ## 만세력의 생년월일 리스트

        if (i == inpo):  ## 만약 사용자가 입력한 생년월일이 맞으면 해당 생년월일의 음양오행을 삽입
            hua1 = hua[num]
            su1 = su[num]
            mok1 = mok[num]
            kim1 = kim[num]
            to1 = to[num]
            # print(i)
            break
        num = num + 1

    num = 0

    for i in yearinfo:  ## 환자정보의 생년월일 리스트
        if (i == inpo):  ## 만약 사용자가 입력한 생년월일이 존재한다면 해당 생년월일을 데이터를 생성
            IDinfo1 = IDinfo[num]
        num = num + 1

    num = 0

    for i in disID:
        if (i == IDinfo1):  ## 그리고 질병 아이디가 존재하는 DB에서 해당 환자의 ID를 검색하여 해당 환자의 질병코드를 찾아낸다
            discode3 = discode1[num]

        num = num + 1

    num = 0

    for i in discode2:  ## 그리고 해당 환자의 질병코드를 다시 한번 검색하여 한글로 된 환자의 한글질병으로 검색한다
        if (i == discode3):
            newdisname = disname[num]

        num = num + 1
    num = 0

    # print(hua1,su1,mok1,kim1,to1)
    yearinfo_ = []

    yearinfo__ = []

    for i in yearinfo:
        yearinfo_.append(i)

    for i in yearinfo:
        yearinfo__.append(i)

    num_ = 0

    count = []

    a = yearinfo_.count(inpo)

    if (yearinfo_.count(inpo) >= 2):

        for i in yearinfo_:
            if (inpo == i):
                count.append(yearinfo_.index(inpo))

                yearinfo_[num_] = 0

            num_ = num_ + 1

        ###########################
        num_ = 0
        for ii in count:

            num = 0

            # print(IDinfo[ii])
            for i in yearinfo__:  ## 환자정보의 생년월일 리스트
                if (i == yearinfo__[count[num_]]):  ## 만약 사용자가 입력한 생년월일이 존재한다면 해당 생년월일을 데이터를 생성
                    IDinfo1 = IDinfo[count[num_]]
                    break
                num = num + 1
            num = 0

            for i in disID:
                if (i == IDinfo1):  ## 그리고 질병 아이디가 존재하는 DB에서 해당 환자의 ID를 검색하여 해당 환자의 질병코드를 찾아낸다
                    discode3 = discode1[num]
                    break

                num = num + 1
            num = 0

            for i in discode2:  ## 그리고 해당 환자의 질병코드를 다시 한번 검색하여 한글로 된 환자의 한글질병으로 검색한다
                if (i == discode3):
                    newdisname = disname[num]

                num = num + 1
            num = 0

            num_ = num_ + 1
            print("질병명 : ", newdisname)
            newdisname1.append(newdisname)

        ####################################3

        # 시각화


    else:

        newdisname1.append(newdisname)

    ghkrfbf = 0
    for i in newdisname1:
        if "소장" in i:
            res_type = "----소장 질병 환자의 평균 음양오행---"
            res2 = thwkd
            ptype=0
            if (mok1 + 0.5 >= tlswkd[0]):
                ghkrfbf = ghkrfbf + 0.25
            if (hua1 + 1 >= tlswkd[1]):
                ghkrfbf = ghkrfbf + 0.45
            if (to1 + 0.5 >= tlswkd[2]):
                ghkrfbf = ghkrfbf + 0.10
            if (kim1 + 0.5 >= tlswkd[3]):
                ghkrfbf = ghkrfbf + 0.10
            if (su1 + 0.5 >= tlswkd[4]):
                ghkrfbf = ghkrfbf + 0.10

            if (ghkrfbf >= 0.7):
                res = "환자의 소장에 질병이 있을 가능성 : 높음"

            else:
                res = "환자의 소장에 질병이 있을 가능성 : 낮음"

            break



        elif "대장" in i:

            res_type = "----대장 질병 환자의 평균 음양오행---"
            res2 = eowkd
            ptype=1
            if (mok1 + 0.5 >= eowkd[0]):
                ghkrfbf = ghkrfbf + 0.10
            if (hua1 + 0.5 >= eowkd[1]):
                ghkrfbf = ghkrfbf + 0.10
            if (to1 + 0.5 >= eowkd[2]):
                ghkrfbf = ghkrfbf + 0.25
            if (kim1 + 1 >= eowkd[3]):
                ghkrfbf = ghkrfbf + 0.45
            if (su1 + 0.5 >= eowkd[4]):
                ghkrfbf = ghkrfbf + 0.10

            if (ghkrfbf >= 0.7):
                res = "환자의 대장에 질병이 있을 가능성 : 높음"

            else:
                res = "환자의 대장에 질병이 있을 가능성 : 낮음"

            break

        elif "간" in i:

            res_type = "----간 질병 환자의 평균 음양오행---"
            res2 = rks
            ptype=2
            if (mok1 + 1 >= rks[0]):
                ghkrfbf = ghkrfbf + 0.45
            if (hua1 + 0.5 >= rks[1]):
                ghkrfbf = ghkrfbf + 0.25
            if (to1 + 0.5 >= rks[2]):
                ghkrfbf = ghkrfbf + 0.10
            if (kim1 + 0.5 >= rks[3]):
                ghkrfbf = ghkrfbf + 0.10
            if (su1 + 0.5 >= rks[4]):
                ghkrfbf = ghkrfbf + 0.10

            if (ghkrfbf >= 0.7):
                res = "환자의 간에 질병이 있을 가능성 : 높음"

            else:
                res = "환자의 간에 질병이 있을 가능성 : 낮음"

            break

        elif "신장" in i:
            ptype=3
            res_type = "----신장 질병 환자의 평균 음양오행---"
            res2 = tlswkd

            if (mok1 + 0.5 >= tlswkd[0]):
                ghkrfbf = ghkrfbf + 0.10
            if (hua1 + 0.5 >= tlswkd[1]):
                ghkrfbf = ghkrfbf + 0.25
            if (to1 + 0.5 >= tlswkd[2]):
                ghkrfbf = ghkrfbf + 0.10
            if (kim1 + 0.5 >= tlswkd[3]):
                ghkrfbf = ghkrfbf + 0.10
            if (su1 + 1 >= tlswkd[4]):
                ghkrfbf = ghkrfbf + 0.45

            if (ghkrfbf >= 0.7):
                print("환자의 신장에 질병이 있을 가능성 : 높음")

            else:
                print("환자의 신장에 질병이 있을 가능성 : 낮음")

            break

        elif "위장" in i:
            ptype=4
            res_type = "----위장 질병 환자의 평균 음양오행---"
            res2 = dnlwkd
            if (mok1 + 0.5 >= dnlwkd[0]):
                ghkrfbf = ghkrfbf + 0.10
            if (hua1 + 0.5 >= dnlwkd[1]):
                ghkrfbf = ghkrfbf + 0.10
            if (to1 + 1 >= dnlwkd[2]):
                ghkrfbf = ghkrfbf + 0.45
            if (kim1 + 0.5 >= dnlwkd[3]):
                ghkrfbf = ghkrfbf + 0.10
            if (su1 + 0.5 >= dnlwkd[4]):
                ghkrfbf = ghkrfbf + 0.25

            if (ghkrfbf >= 0.7):
                res = "환자의 위장에 질병이 있을 가능성 : 높음"

            else:
                res = "환자의 위장에 질병이 있을 가능성 : 낮음"
            break
    type_5 = [mok1, hua1, to1, kim1, su1]
    print (type_5)
    newdisname="가장 확률이 높은 질병 : "+newdisname
    print(newdisname)
    for i in range(0,5):
        res2[i]=round(res2[i],2)

    return render(request,'manse/result.html',{'name':name,'date':inpo,"res":res,"newdisname":newdisname,"type":type_5,
                                        "res_type":res_type,'res2':res2,'ptype':ptype})